import asyncio
import aiohttp
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import create_tables
from database import get_profile, get_water_log
from config import API_TOKEN
from utils import calculate_water_intake, calculate_calories, get_temperature, get_calories
from database import set_profile, get_progress, log_water, log_food, log_workout
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


class ProfileForm(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    goal_calories = State()
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class FoodState(StatesGroup):
    waiting_for_calories = State()
    waiting_for_grams = State()

class WorkoutState(StatesGroup):
    waiting_for_workout_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    waiting_for_workout_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

# –†–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –º–∏–Ω—É—Ç—É –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
workout_calories_per_minute = {
    "–ë–µ–≥": 10,
    "–ë—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞": 5,
    "–ü–ª–∞–≤–∞–Ω–∏–µ": 8,
    "–í–µ–ª–æ—Å–∏–ø–µ–¥": 7,
    "–°–∫–∞–∫–∞–ª–∫–∞": 13,
    "–¢–∞–Ω—Ü—ã": 7,
    "–ô–æ–≥–∞": 5,
}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def workout_keyboard():
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–≥", callback_data="–ë–µ–≥"),
             InlineKeyboardButton(text="–ë—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞", callback_data="–ë—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞")],
            [InlineKeyboardButton(text="–ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="–ü–ª–∞–≤–∞–Ω–∏–µ"),
             InlineKeyboardButton(text="–í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="–í–µ–ª–æ—Å–∏–ø–µ–¥")],
            [InlineKeyboardButton(text="–°–∫–∞–∫–∞–ª–∫–∞", callback_data="–°–∫–∞–∫–∞–ª–∫–∞"),
             InlineKeyboardButton(text="–¢–∞–Ω—Ü—ã", callback_data="–¢–∞–Ω—Ü—ã")],
            [InlineKeyboardButton(text="–ô–æ–≥–∞", callback_data="–ô–æ–≥–∞")]
        ],
        row_width=2  # –£–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ—Ä–º–æ–π –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Å /set_profile.")


@dp.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileForm.weight)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'weight'


@dp.message(ProfileForm.weight)
async def process_weight(message: Message, state: FSMContext):
    weight = float(message.text)
    await state.update_data(weight=weight)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileForm.height)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'height'


@dp.message(ProfileForm.height)
async def process_height(message: Message, state: FSMContext):
    height = float(message.text)
    await state.update_data(height=height)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileForm.age)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'age'


@dp.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    age = int(message.text)
    await state.update_data(age=age)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileForm.activity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'activity'


@dp.message(ProfileForm.activity)
async def process_activity(message: Message, state: FSMContext):
    activity = int(message.text)
    await state.update_data(activity=activity)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(ProfileForm.city)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'city'


@dp.message(ProfileForm.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    if not city:
        city = "Moscow"  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –≥–æ—Ä–æ–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    user_data = await state.get_data()
    goal_calories = calculate_calories(user_data['weight'], user_data['height'], user_data['age'],
                                       user_data['activity'])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
    temp = await get_temperature(city)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –≤—ã–∑–æ–≤—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    hot_weather = temp > 25

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—É –≤–æ–¥—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    water_intake = calculate_water_intake(user_data['weight'], user_data['activity'], hot_weather)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await set_profile(message.from_user.id, user_data['weight'], user_data['height'], user_data['age'],
                      user_data['activity'], city, goal_calories)

    await message.reply(
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_intake} –º–ª, –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {goal_calories} –∫–∫–∞–ª. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_progress –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message(Command("check_progress"))
async def check_progress(message: Message):
    progress = await get_progress(message.from_user.id)
    await message.reply(progress)


@dp.message(Command("log_water"))
async def log_water_cmd(message: Message):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
        command_parts = message.text.split()

        if len(command_parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 500")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —á–∏—Å–ª–æ
        try:
            amount = float(command_parts[1])
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (—á–∏—Å–ª–æ).")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—É –≤ –±–∞–∑—É
        await log_water(message.from_user.id, amount)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_profile = await get_profile(message.from_user.id)

        if user_profile:
            water_goal = user_profile['water_goal']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
            current_water = await get_water_log(message.from_user.id)
            remaining_water = water_goal - current_water

            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if remaining_water > 0:
                await message.reply(
                    f"–ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {remaining_water:.2f} –º–ª –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.")
            else:
                await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã. –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
        else:
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /log_water: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")



@dp.message(Command("log_food"))
async def log_food_cmd(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    food_name = ' '.join(message.text.split()[1:])

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ OpenFoodFacts)
    calories_per_100g = await get_calories(food_name)

    if calories_per_100g is None:
        # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
        await message.reply(
            f"üçå {food_name.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–∫–∞–∂–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ 100 –≥.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
        await state.set_state(FoodState.waiting_for_calories.state)
        await state.update_data(food_name=food_name)

    else:
        # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        await message.reply(f"üçå {food_name.capitalize()} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥—Ä–∞–º–º–æ–≤
        await state.set_state(FoodState.waiting_for_grams.state)
        await state.update_data(food_name=food_name, calories_per_100g=calories_per_100g)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
@dp.message(StateFilter(FoodState.waiting_for_calories))
async def log_food_calories(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        calories_per_100g = float(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(calories_per_100g=calories_per_100g)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞ —Å—ä–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        food_name = (await state.get_data())['food_name']
        await message.reply(f"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º {food_name} –≤—ã —Å—ä–µ–ª–∏?")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º–æ–≤
        await state.set_state(FoodState.waiting_for_grams.state)

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ).")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º–æ–≤
@dp.message(StateFilter(FoodState.waiting_for_grams))
async def log_food_amount(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º
        grams = float(message.text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        calories_per_100g = data['calories_per_100g']
        food_name = data['food_name']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–º–º–æ–≤
        calories = (calories_per_100g * grams) / 100

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –µ–¥—ã
        await log_food(message.from_user.id, food_name, calories)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {calories:.2f} –∫–∫–∞–ª –¥–ª—è {food_name} ({grams} –≥).")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º (—á–∏—Å–ª–æ).")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /log_workout
@dp.message(Command("log_workout"))
async def log_workout_cmd(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=workout_keyboard())

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutState.waiting_for_workout_type)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.callback_query()
async def handle_workout_selection(callback_query: types.CallbackQuery, state: FSMContext):
    workout_type = callback_query.data  # –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ callback_data
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {workout_type}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(workout_type=workout_type)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await callback_query.message.reply(f"–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å {workout_type}?")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_state(WorkoutState.waiting_for_workout_time)  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º set_state()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(WorkoutState.waiting_for_workout_time)
async def handle_workout_time(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        workout_time = int(message.text)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        workout_type = data['workout_type']

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        calories_per_minute = workout_calories_per_minute.get(workout_type, 0)
        calories_burned = workout_time * calories_per_minute

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        await log_workout(message.from_user.id, workout_type, workout_time, calories_burned)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {workout_type} {workout_time} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª.")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")

async def main():
    await create_tables()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(create_tables())
    asyncio.run(main())
