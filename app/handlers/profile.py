from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.database import db_connect
from app.states import ProfileForm
from app.utils import calculate_calories, calculate_water_intake, get_temperature

router = Router()

@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileForm.weight)

@router.message(ProfileForm.weight)
async def process_weight(message: Message, state: FSMContext):
    weight = float(message.text)
    await state.update_data(weight=weight)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileForm.height)

@router.message(ProfileForm.height)
async def process_height(message: Message, state: FSMContext):
    height = float(message.text)
    await state.update_data(height=height)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileForm.age)

@router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    age = int(message.text)
    await state.update_data(age=age)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileForm.activity)

@router.message(ProfileForm.activity)
async def process_activity(message: Message, state: FSMContext):
    activity = int(message.text)
    await state.update_data(activity=activity)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(ProfileForm.city)

@router.message(ProfileForm.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text if message.text else "Moscow"  # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    temp = await get_temperature(city)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É
    if temp is None:
        city = "Moscow"  # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    user_data = await state.get_data()
    goal_calories = calculate_calories(user_data['weight'], user_data['height'], user_data['age'], user_data['activity'])
    hot_weather = temp > 25 if temp is not None else False
    water_intake = calculate_water_intake(user_data['weight'], user_data['activity'], hot_weather)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = await db_connect()  # ‚úÖ –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async with db:  # ‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async with
        await db.execute("""
            INSERT INTO profiles (user_id, weight, height, age, activity, city, goal_calories)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
            weight=excluded.weight, height=excluded.height, age=excluded.age, 
            activity=excluded.activity, city=excluded.city, goal_calories=excluded.goal_calories
        """, (message.from_user.id, user_data['weight'], user_data['height'], user_data['age'], user_data['activity'], city, goal_calories))
        await db.commit()

    await message.reply(
        f"‚úÖ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n"
        f"üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_intake} –º–ª\n"
        f"üî• –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {goal_calories} –∫–∫–∞–ª\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_progress –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
    )
    await state.clear()
